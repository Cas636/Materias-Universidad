{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\POWER\\\\Desktop\\\\Materias Universidad\\\\front\\\\src\\\\components\\\\LogViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../LogViewer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LogViewer = () => {\n  _s();\n  // Estado para almacenar las líneas del log\n  const [logLines, setLogLines] = useState([]);\n  const [error, setError] = useState(null);\n\n  // Función para obtener las últimas líneas del log desde el servidor\n  const fetchLogLines = async () => {\n    try {\n      const response = await fetch(\"http://192.168.1.17:5000/logs\");\n      if (!response.ok) {\n        throw new Error(\"Error al obtener las líneas del log\");\n      }\n      const data = await response.json();\n      console.log(data);\n      if (Array.isArray(data.log)) {\n        setLogLines(data.log.slice(-6)); // Usamos el array dentro de \"log\" y obtenemos las últimas 6 líneas\n      } else {\n        console.error('Los datos no contienen un array en \"log\":', data);\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // useEffect para actualizar el log cada 30 segundos\n  useEffect(() => {\n    // Llamar a la función al montar el componente\n    fetchLogLines();\n\n    // Crear el intervalo que llama a fetchLogLines cada 30 segundos\n    const interval = setInterval(() => {\n      fetchLogLines();\n    }, 30000); // 30000 milisegundos = 30 segundos\n\n    // Limpiar el intervalo al desmontar el componente\n    return () => clearInterval(interval);\n  }, []); // El array vacío asegura que el intervalo solo se establezca una vez\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"log-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Log Actualizado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: logLines.map((line, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `log-line ${line.includes(\"Error\") ? \"error\" : \"info\"}`,\n        children: line\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 12\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(LogViewer, \"LaFwfDuzMHCdO/GHNjD0S96Bv7M=\");\n_c = LogViewer;\nexport default LogViewer;\nvar _c;\n$RefreshReg$(_c, \"LogViewer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","LogViewer","_s","logLines","setLogLines","error","setError","fetchLogLines","response","fetch","ok","Error","data","json","console","log","Array","isArray","slice","err","message","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","line","index","includes","_c","$RefreshReg$"],"sources":["C:/Users/POWER/Desktop/Materias Universidad/front/src/components/LogViewer.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../LogViewer.css\";\r\n\r\nconst LogViewer = () => {\r\n  // Estado para almacenar las líneas del log\r\n  const [logLines, setLogLines] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Función para obtener las últimas líneas del log desde el servidor\r\n  const fetchLogLines = async () => {\r\n    try {\r\n      const response = await fetch(\"http://192.168.1.17:5000/logs\");\r\n      if (!response.ok) {\r\n        throw new Error(\"Error al obtener las líneas del log\");\r\n      }\r\n      const data = await response.json();\r\n\r\n      console.log(data);\r\n      if (Array.isArray(data.log)) {\r\n        setLogLines(data.log.slice(-6)); // Usamos el array dentro de \"log\" y obtenemos las últimas 6 líneas\r\n      } else {\r\n        console.error('Los datos no contienen un array en \"log\":', data);\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // useEffect para actualizar el log cada 30 segundos\r\n  useEffect(() => {\r\n    // Llamar a la función al montar el componente\r\n    fetchLogLines();\r\n\r\n    // Crear el intervalo que llama a fetchLogLines cada 30 segundos\r\n    const interval = setInterval(() => {\r\n      fetchLogLines();\r\n    }, 30000); // 30000 milisegundos = 30 segundos\r\n\r\n    // Limpiar el intervalo al desmontar el componente\r\n    return () => clearInterval(interval);\r\n  }, []); // El array vacío asegura que el intervalo solo se establezca una vez\r\n\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  return (\r\n    <div className=\"log-container\">\r\n      <h2>Log Actualizado</h2>\r\n      <ul>\r\n        {logLines.map((line, index) => (\r\n           <div key={index} className={`log-line ${line.includes(\"Error\") ? \"error\" : \"info\"}`}>\r\n           {line}\r\n         </div>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogViewer;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;MAC7D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;MACxD;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjB,IAAII,KAAK,CAACC,OAAO,CAACL,IAAI,CAACG,GAAG,CAAC,EAAE;QAC3BX,WAAW,CAACQ,IAAI,CAACG,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnC,CAAC,MAAM;QACLJ,OAAO,CAACT,KAAK,CAAC,2CAA2C,EAAEO,IAAI,CAAC;MAClE;IACF,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZb,QAAQ,CAACa,GAAG,CAACC,OAAO,CAAC;IACvB;EACF,CAAC;;EAED;EACAtB,SAAS,CAAC,MAAM;IACd;IACAS,aAAa,CAAC,CAAC;;IAEf;IACA,MAAMc,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCf,aAAa,CAAC,CAAC;IACjB,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEX;IACA,OAAO,MAAMgB,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,IAAIhB,KAAK,EAAE,oBAAOL,OAAA;IAAAwB,QAAA,GAAK,SAAO,EAACnB,KAAK;EAAA;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAE3C,oBACE5B,OAAA;IAAK6B,SAAS,EAAC,eAAe;IAAAL,QAAA,gBAC5BxB,OAAA;MAAAwB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB5B,OAAA;MAAAwB,QAAA,EACGrB,QAAQ,CAAC2B,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACvBhC,OAAA;QAAiB6B,SAAS,EAAE,YAAYE,IAAI,CAACE,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,MAAM,EAAG;QAAAT,QAAA,EACnFO;MAAI,GADKC,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAC1B,EAAA,CArDID,SAAS;AAAAiC,EAAA,GAATjC,SAAS;AAuDf,eAAeA,SAAS;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}